[
  
  {
    "title": "Debounce와 Throttle",
    "url": "/posts/Debounce-Throttle/",
    "categories": "study",
    "tags": "android, cs",
    "date": "2024-12-21 00:00:00 +0900",
    





    
    "snippet": "  사용자가 버튼을 연속으로 클릭해서 연속으로 API가 호출하는 걸 어떻게 대처해야 할까?  검색창에 단어 입력할 때마다 검색 결과를 보여줘야 하는데 API를 자주 호출하게 되면 어쩌지?개발하면서 이런 고민 하게 되는데, 이때 알아보게 된 방식이 Debounce와 Throttle.둘이 근데 개념이 비슷한데 정확하게 차이가 뭘까? 싶어서 작성하는 글.D...",
    "content": "  사용자가 버튼을 연속으로 클릭해서 연속으로 API가 호출하는 걸 어떻게 대처해야 할까?  검색창에 단어 입력할 때마다 검색 결과를 보여줘야 하는데 API를 자주 호출하게 되면 어쩌지?개발하면서 이런 고민 하게 되는데, 이때 알아보게 된 방식이 Debounce와 Throttle.둘이 근데 개념이 비슷한데 정확하게 차이가 뭘까? 싶어서 작성하는 글.Debounce  https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleFirst.png  🔥 debounce는 일정 시간동안 이벤트가 발생하지 않으면 마지막 이벤트를 방출한다.  그 이전의 이벤트는 취소한다.  아래와 같이 flow로 구현하면 특정 시간 (1초) 전에 발생한 1과 2은 수집되지 않는 것을 확인할 수 있다.flow {      emit(1)      delay(90)      emit(2)      delay(90)      emit(3)      delay(1010)      emit(4)      delay(1010)      emit(5)  }.debounce(1000).collectLatest {      println(\"debounce $it\")}✅ 출력debounce 3debounce 4debounce 5Throttle  🔥 Throttle은 일정 주기마다 이벤트를 캐치해서 전달한다.  일정 주기마다 어느 시점의 이벤트를 처리하냐에 따라 throttleFirst, throttleLast로 나뉜다.          throttleFirst는 첫 번째 이벤트만 실행하고, 이후 이벤트는 무시한다.      throttleLast는 일정 시간 동안 발생한 이벤트 중 가장 마지막 이벤트를 실행한다.      throttleFirst  첫 번째 이벤트만 실행만 실행하고, 이후 이벤트는 무시한다.  flow에서는 직접 지원하지 않아서, 직접 구현해주어야 한다.          https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleFirst.png      fun &lt;T&gt; Flow&lt;T&gt;.throttleFirst(duration: Long): Flow&lt;T&gt; = flow {\tvar lastTime = 0L\tcollect { value -&gt;\t\tval currentTime = System.currentTimeMillis()\t\tif (currentTime - lastTime &gt;= duration) {\t\t\tlastTime = currentTime\t\t\temit(value)\t\t}\t}}flow {      emit(1)      delay(90)      emit(2)      delay(90)      emit(3)      delay(1010)      emit(4)      delay(1010)      emit(5)  }.throttleFirst(1000).collectLatest {      println(\"throttleFirst $it\")}✅ 출력throttleFirst 1throttleFirst 4throttleFirst 51초 간격으로 가장 먼저 발생한 이벤트 1, 4, 5가 호출된다.throttleLast  일정 시간 동안 발생한 이벤트 중 가장 마지막 이벤트를 실행한다.  flow에서는 sample()이 throttleLast를 지원한다.  https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleLast.pngflow {      emit(1)      delay(90)      emit(2)      delay(90)      emit(3)      delay(1010)      emit(4)      delay(1010)      emit(5)  }.sample(1000).collectLatest {      println(\"sample $it\")}✅ 출력sample 3sample 41초 간격으로 확인했을 때, 가장 마지막 이벤트였던 3, 4를 호출한다. 마지막 방출된 5는 일정 주기(1초)가 돌기 전에 끝났기 때문에 방출되지 않는다.Debounce와 Throttle의 차이✅ Debounce는 마지막 이벤트 이후 (이벤트 호출이 멈춘 상태로) 일정 시간이 지나야 실행이 되는 반면, Throttle은 일정 시간마다 이벤트를 실행한다.위 그림을 보면 조금 더 이해가 편한데, Debounce는 이벤트가 없는 채로 일정 주기가 지난 후에야 방출하고, Throttle은 일정 주기마다 한 번 체크를 한다는 점이다.실제로 버튼을 클릭했을 때 이벤트를 호출하고, debounce, throttleFirst, throttleLast를 1초로 설정하여 받았을 때 차이가 발생하는 것을 볼 수 있었다.이 때 구현은 flow로 진행했다.Debounce(1초):                                                              Your browser does not support the video tag. Here is a    link to the video file instead.      버튼을 연속으로 클릭했을 때 1초 정도 아무런 이벤트가 들어오지 않았을 때 처리했음을 볼 수 있다.throttleFirst(1초):                                                              Your browser does not support the video tag. Here is a    link to the video file instead.      버튼을 연속으로 클릭했을 때 처음 이벤트가 실행되고 이후 1초 동안의 이벤트는 무시되었다.throttleLast(1초):                                                              Your browser does not support the video tag. Here is a    link to the video file instead.      버튼을 연속으로 클릭했을 때 1초 동안 호출한 이벤트 중 마지막 이벤트만을 처리했다.    사용 예시  📌 debounce : 검색 시 자동 완성, 아이디 등 유효성 검사단어를 타이핑할 때 사람마다 타이핑 하는 속도는 다르기 때문에 일정 기간마다 이벤트를 쏘는 Throttle은 같은 단어를 여러 번 쏘게 될 수 있다. debounce를 쓰면 일정 기간이 지난 후 호출하게 되어 이벤트가 과도하게 호출되는 것을 막을 수 있다.📌 throttle : 버튼 중복 클릭 방지, 무한 스크롤버튼을 연속으로 클릭하는 경우 이벤트는 총 한 번만 호출되어야 한다.이때 throttleFirst()를 사용하면 가장 처음 이벤트만 호출되어 효율적이다.그 외에도 안드로이드에서는 직접 구현하진 않지만, 프론트에서는 무한 스크롤 구현 시 최적화를 위해서 throttle 기법을 사용하기도 한다.(android 사례보다 react 관련 자료가 훨씬 많았다고 느낌)(Paging3이 없었다면 직접 구현해야 했을 수도 있겠다는 생각도 든다.)추가: ThrottleLatest위 내용은 별도로 분리했다. flow로 구현하고자 해도 복잡하고, \b인터넷 예제에 있는 대로 해봐도 동작 확인도 제대로 못했다.RxJava에서는 지원하는 함수인데, 기존 throttleFirst + throttleLast를 합쳤다고 보면 된다. 처음 이벤트를 즉시 실행하며, 그 이후에는 최신 이벤트만을 실행한다.  https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleLatest.png어떤 차이가 있는지 궁금해 이 부분은 함수를 제공하는 RxJava로 테스트해봤다.처음 이벤트를 받는 부분은 throttleFirst처럼 동작하다가, 이후에는 throttleLast처럼 동작한다.                                                              Your browser does not support the video tag. Here is a    link to the video file instead.    요약🚀 debounce() vs throttle()                             debounce()      throttle()                  동작 방식      마지막 이벤트 후 일정 시간이 지나야 실행      일정 시간마다 실행              사용 예시      검색 입력, 자동 완성      버튼 중복 클릭 방지, 무한 스크롤      🚀 throttleFirst(), throttleLast(), throttleLatest()                   throttleFirst()      throttleLast()      throttleLatest()                  설명      첫 번째 이벤트만 실행      가장 마지막 이벤트 실행      처음 이벤트 실행 이후 가장 마지막 이벤트 실행      참고 자료  브랜디 랩스 &gt; 안드로이드 이벤트 핸들링 적용하기  (Android) Debounce와 Throttle 이해하기  (영문) Throttle vs Debounce in RxSwift  (StackOverFlow) What difference between throttlelatest and throttlelast in rxjava  From RxJava to Kotlin Flow: Throttling"
  },
  
  {
    "title": "Github Action으로 Android Firebase App Distribution 배포 자동화 하기",
    "url": "/posts/github-action-android-firebase-app-distribution/",
    "categories": "log",
    "tags": "android, ci/cd, git",
    "date": "2024-12-17 00:00:00 +0900",
    





    
    "snippet": "목표 : 테스트앱 배포 자동화매번 테스트 앱 배포할 때마다 배포하고 노티하는 번거로움을 CD로 해결해보자.  트리거가 발생하면 -&gt; Firebase App Distribution 배포  성공 시 Slack 채널에 알람name : App Buildon :     # 트리거 정의    job :    # APK 추출    # App Distrubut...",
    "content": "목표 : 테스트앱 배포 자동화매번 테스트 앱 배포할 때마다 배포하고 노티하는 번거로움을 CD로 해결해보자.  트리거가 발생하면 -&gt; Firebase App Distribution 배포  성공 시 Slack 채널에 알람name : App Buildon :     # 트리거 정의    job :    # APK 추출    # App Distrubution 업로드    # Slack 채널에 노티테스트최종 코드action.yamlname: App-Distributionon:  push:    branches:      - release/**       - hotfix/**    paths:      - docs/release-note.txtenv:  RELEASE_NOTE_FILE: docs/release-note.txtjobs:  deploy:    runs-on: ubuntu-latest    steps:      - name: Checkout branch        uses: actions/checkout@v2      - name: Cache NDK        uses: actions/cache@v2        with:          path: |            ~/ndk          key: $-ndk-20.0.5594570-$          restore-keys: |            $-ndk-      - name: Install NDK        run: |          mkdir -p $HOME/ndk          wget -q https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip -O $HOME/ndk/ndk.zip          unzip -qn $HOME/ndk/ndk.zip -d $HOME/ndk          echo \"ndk.dir=$HOME/ndk/android-ndk-r20\" &gt;&gt; $GITHUB_WORKSPACE/local.properties      - name: Gradle cache        uses: actions/cache@v3        with:          path: |            ~/.gradle/caches            ~/.gradle/wrapper          key: $-gradle-$          restore-keys: |            $-gradle-      - name: Set up JDK        uses: actions/setup-java@v3        with:          distribution: 'zulu'          java-version: '17'      - name: Grant Permission for gradlew # gradlew 에 대한 퍼미션을 허용한다.        run: chmod +x ./gradlew        shell: bash      - name: Create google-services.json        run: echo '$' &gt; ./app/google-services.json      - name: Build APK        run: ./gradlew assembleDebug\t\t\t\t      - name: Find APK in folder        id: find_apk        run: |          apk_file=$(find app/build/outputs/apk/debug -name '*.apk' -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -d' ' -f2-)          echo \"Found APK file: $apk_file\"          echo \"apk_file=$apk_file\" &gt;&gt; $GITHUB_ENV      # Deploy to Firebase App Distribution      - name: Deploy to Firebase App Distribution        uses: wzieba/Firebase-Distribution-Github-Action@v1        with:          appId: $          serviceCredentialsFileContent: $          file: $          groups: $          releaseNotesFile: $            # 파일 내용 읽어 환경 변수로 설정      - name: Read Release Notes and Set Environment Variable        run: |          if [ -f \"$RELEASE_NOTE_FILE\" ]; then              echo \"Converting release notes to a JSON-friendly format...\"              RELEASE_NOTES=$(cat \"$RELEASE_NOTE_FILE\" | sed ':a;N;$!ba;s/\\n/\\\\n/g')              echo \"FIREBASE_RELEASE_NOTES=$RELEASE_NOTES\" &gt;&gt; \"$GITHUB_ENV\"          else              echo \"FIREBASE_RELEASE_NOTES=No release notes found\" &gt;&gt; \"$GITHUB_ENV\"          fi      - name: Debug Specific Environment Variable        run: |          echo \"FIREBASE_RELEASE_NOTES: $FIREBASE_RELEASE_NOTES\"          # Notify      - name: Send success notification to Slack        if: success()        uses: slackapi/slack-github-action@v2.0.0        env:          RELEASE_NOTES: $          GROUP: $        with:          payload-file-path: \"./artifacts.json\"          payload-templated: true          webhook: $          webhook-type: webhook-trigger./artifacts.json{  \"text\": \"Firebase App Deployment Notification\",  \"attachments\": [    {      \"color\": \"#74d990\",      \"blocks\": [        {          \"type\": \"section\",          \"text\": {            \"type\": \"mrkdwn\",            \"text\": \":rocket: *Firebase App Distribution Successful*\"          }        },        {          \"type\": \"section\",          \"text\": {            \"type\": \"mrkdwn\",            \"text\": \"$\"          }        },        {          \"type\": \"divider\"        },        {          \"type\": \"context\",          \"elements\": [            {              \"type\": \"mrkdwn\",              \"text\": \"Group: $\"            }          ]        }      ]    }  ]}release/, hotfix/ 브랜치에서 docs/release-note.txt 변경 시 배포:  배포 노트까지 로컬에서 써서 push만 하면 바로 배포가 되도록 설정  처음에는 트리거를 이슈로 하고 이슈 내용을 배포 노트로 해도 좋을 것 같아서 해봤는데, 배포할 브랜치 설정도 필요하고, 이슈 오픈하는 과정이나 이런 게 귀찮아서 최대한 단순하게 하는 게 좋을 것 같아 pass          이슈 트리거로 했던 코드는 아래에 메모      on:# trigger : 이슈 생성 시 issues:   types: [ opened ]    # 중간 설정    # ...        # 이슈 설명 가져오기    - name: Get issue description      id: fetch-issue      uses: actions/github-script@v6      with:        script: |          const description = context.payload.issue?.body || \"\";          core.setOutput(\"issue_body\", description);    # Firebase 배포    - name: Deploy to Firebase App Distribution      uses: wzieba/Firebase-Distribution-Github-Action@v1      with:        appId: $        serviceCredentialsFileContent: $        file: $        groups: $        releaseNotes: $변수 설정:  기본적으로 위와 같은 설정 해주었고 추가로 keystore 등 추가하면 된다.  FIREBASE_GROUPS는 파이어베이스 배포 그룹이었는데 간단히 바꿀 수 있게끔 하려고 var 로 뺐다.          이 부분 그룹 ID 대충 해보려고 하다가 고생함…      그룹은 들어가서 파이어베이스 그룹 이름이 아니고 이름 옆에 표기된 걸로 해야 한다.      여러 개 그룹 넣을 경우에는 띄워쓰기 없이 아래처럼 해야한다.                  “그룹1,그룹2”          그룹 ID가 제대로 설정하지 않으면 아래와 같은 오류를 마주한다..                          HTTP Error: 404, Requested entity was not found.                                          =&gt; 단 요건 github action 버전 마다 다를 수 있어서 주의 필요![image](https://user-images.githubusercontent.com/17172841/173846092-89ae68b6-96f8-4f66-826f-47962efecd7f.png)  CREDENTIAL_FILE_CONTENT의 경우는 해당 사이트 참고해서 발급받으면 된다../artifacts.json 으로 Slack 에 노티 시 템플릿 설정:  Slack Kit Builder 에서 만들었음  payload-templated을 true로 해주고, payload-file-path를 위로 설정해주어야 되며, 처음에 json 파일에서 바로 변수 참조했다가 `???’ 로 뜨는 경우가 있었다… 요 이슈 참고해서 env로 설정해서 해결  추가로 release-note.txt 파일을 그냥 cat으로 읽으면 –&gt; 멀티 라인은 변수로 저장할 수 없어서 변수 저장할 때부터 오류, EOF로 바꾸면 형식을 artifacts.json에서 읽을 수 없다고 하기 때문에 json 이 읽을 수 있는 형식에 맞게 바꿔주었다."
  },
  
  {
    "title": "Tasks and the back stack : Task",
    "url": "/posts/Tasks-and-the-back-stask-task/",
    "categories": "log",
    "tags": "android, task",
    "date": "2024-11-27 00:00:00 +0900",
    





    
    "snippet": "앱 내에서 화면 이동을 구현하다보면 Intent에서 Flag를 세팅해줄 일이 많이 생기는 것 같다.아무래도 사이드 프로젝트에선 화면 진입이 대부분 한 군데인 것만 경험했는데, 실무에서는 푸시나 링크 등 진입점이 다양해지고, 중간에 쌓인 화면을 모두 꺼버리는 등 스택 관리가 중요시 하게 되어 이런 일들이 발생하는 듯하다.작년 이맘때 쯤 이부분 헷갈려서 ...",
    "content": "앱 내에서 화면 이동을 구현하다보면 Intent에서 Flag를 세팅해줄 일이 많이 생기는 것 같다.아무래도 사이드 프로젝트에선 화면 진입이 대부분 한 군데인 것만 경험했는데, 실무에서는 푸시나 링크 등 진입점이 다양해지고, 중간에 쌓인 화면을 모두 꺼버리는 등 스택 관리가 중요시 하게 되어 이런 일들이 발생하는 듯하다.작년 이맘때 쯤 이부분 헷갈려서 적어두었다가 이번 기회에 조금 더 정리해서 올려본당Tasktask ?  A task is a collection of activities that users interact with when trying to do something in your app. (링크)📌 Task는 사용자 관점에서 Activity의 모음이다.예를 들어 이메일 앱에는 새 메시지 목록을 표시하는 Activity가 있으며,사용자가 메시지를 선택하면 해당 메시지를 볼 수 있는 새 Activity가 열린다.새로운 Activity는 백 스택에 추가되며, 뒤로가기를 하거나 종료하면 스택에서 제거가 된다.root launcher activities앱에서 처음 실행할 Activity의 경우 AndroidManifest.xml에 아래처럼 인텐트 필터를 ACTION_MAIN, CATEGORY_LAUNCHER로 선언한다.&lt;activity          android:name=\".feature.main.MainActivity\"          android:exported=\"true\"&gt;  &lt;intent-filter&gt;    &lt;action android:name=\"android.intent.action.MAIN\" /&gt;    &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;  &lt;/intent-filter&gt;&lt;/activity&gt;이렇게 선언된 Activity는 곧 root launcher activity가 된다.task의 root가 된다는 것이며, 이러한 root activity에서 백 버튼을 눌렀을 때 동작 과정은 os 별로 상이하다.  android 11 이하 : 시스템이 activity를 종료 시킨다.  android 12 이상 : activity를 종료하는 대신, task를 background로 이동시킨다.background 및 foreground taskTask는 하나의 응집된 작업 단위다.만약 새 작업을 시작하거나, 새로운 앱을 열면 현재 Task는 Background로 이동하고, 현재 백스택을 그대로 유지하고 있다.그러다 다시 Background에서 Foreground로 돌아오면, 스택에서 가장 위에 있던 Activity가 활성화 되어 사용자는 마지막으로 보고 있던 화면에서 이어서 진행할 수 있는 것.😎 tip. ADB로 stack 확인하는 명령어adb shell dumpsys activity activities궁금증 풀기1. 앱마다 Task가 다른가? 앱 안에서도 Task가 다르게 선언될 수 있나?기본적으로는 앱마다 task는 다르게 선언된다.앱이 열리면, 기본적으로는 root launcher activity를 새로운 task에 추가하게 된다.그러나 내가 임의로 어떤 Activity를 taskAffinity 속성을 사용해서 다른 앱의 task에 올라가게끔 선언이 가능하다. -&gt; 이 부분은 직접 테스트 해보고 넣어볼 것.앱 안에서 task 또한 위 속성을 사용하거나, Intent Flags 혹은 launchMode를 사용해서 제어가 가능하다.2. 멀티 윈도우로 있을 때에는 task는 어떻게 되는가?시스템은 각 창별로 task를 따로 관리하게 된다. (참고)"
  },
  
  {
    "title": "Photo Picker",
    "url": "/posts/Photo-Picker/",
    "categories": "log",
    "tags": "android",
    "date": "2024-11-24 00:00:00 +0900",
    





    
    "snippet": "전에 targetSDK 34 대응할 때 PhotoPicker 관련 히스토리 정리용.Photo Picker  The photo picker provides a browsable interface that presents the user with their media library (공식 문서)      안드로이드에서 제공하는 사진 선택기.  단일 / 멀...",
    "content": "전에 targetSDK 34 대응할 때 PhotoPicker 관련 히스토리 정리용.Photo Picker  The photo picker provides a browsable interface that presents the user with their media library (공식 문서)      안드로이드에서 제공하는 사진 선택기.  단일 / 멀티 and 이미지 / 동영상 제공 하며, 권한 없이 미디어에 접근 가능  Photo Picker의 사용 조건          Android 13 이상 이거나 혹은 Android 11 이상이면서 SDK R Extensions이 최소 2일 때      그 외에 ACTION_OPEN_DOCUMENT 등의 방식으로 내부에서 분기 처리        ✅ 나중에 알게된 사실, PhotoPicker가 일부 앨범만 표시되는 경우가 있다. 관련 이슈 트래커 링크PhotoPicker 외의 미디어 선택 방법  단순 미디어 선택이 필요한 경우 권한 없이 ACTION_OPEN_DOCUMENT이나 ACTION_PICK 를 사용하면 충분히 가능하다.          이 경우 이미지, 동영상만이 아닌 pdf와 같은 파일에도 접근이 된다.          val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {      addCategory(Intent.CATEGORY_OPENABLE)      type = \"application/pdf\"      // Optionally, specify a URI for the file that should appear in the      // system file picker when it loads.      putExtra(DocumentsContract.EXTRA_INITIAL_URI, pickerInitialUri)  }                      만약 PhotoPicker 만으로 원하는 기능을 구현할 수 없거나 혹은 앱 디자인과 통일하고 싶은 경우 MediaStore에 직접 접근하여 커스텀 갤러리 구현이 필요하다.     * targetSDK34 부터 ‘선택한 사진에 대한 접근 권한’ 추가 -&gt; 접근 가능한 사진이 추가 가능하도록 기능 제공 필요     * 또한 추가로 유저가 얼마든지 권한을 ‘모두 허용’으로 바꾸게끔 UI를 제공하는 것도 좋다.          관련 블로그 - Android 14에서 추가된 ‘사진/동영상의 일부 접근 권한’ 제대로 대응하는 방법      "
  },
  
  {
    "title": "minSdk, targetSdk, complieSdk",
    "url": "/posts/minsdk-targetsdk-compliesdk/",
    "categories": "log",
    "tags": "android",
    "date": "2023-10-25 00:00:00 +0900",
    





    
    "snippet": "회사에서 targetsdk34 대응 작업을 진행하게 되면서 정리한 글minSdk, targetSdk, complieSdk  minSdk : 애플리케이션을 실행하는데 필요한 최소 API 수준  만약 API 레벨이 이 속성에 지정된 값보다 낮은 경우 사용자는 애플리케이션을 설치할 수 없다.  targetSdk : 애플리케이션이 대상으로 하는 API 레벨 ...",
    "content": "회사에서 targetsdk34 대응 작업을 진행하게 되면서 정리한 글minSdk, targetSdk, complieSdk  minSdk : 애플리케이션을 실행하는데 필요한 최소 API 수준  만약 API 레벨이 이 속성에 지정된 값보다 낮은 경우 사용자는 애플리케이션을 설치할 수 없다.  targetSdk : 애플리케이션이 대상으로 하는 API 레벨  설정하지 않으면 기본 값은 minSdk 버전과 같다.  targetSdk를 올리게 되면, 최소 sdk(즉 minSdk)에서 정의된 요소만 사용하도록 제한 X, API 수준에 정의된 매니페스트 요소 혹은 동작을 사용할 수 있다.  complieSdk : 컴파일 시 \b사용할 Android API 버전  targetSdkVersion &lt;= complieSdkVersion          complieSdk를 올리면 지정 API로 컴파일 시 사용되고, targetSdk를 올리면 런타임 때 사용된다.        target API가 컴파일이 되지 않았는데 지원은 할 수 없기 때문에 그렇다.  API 레벨: Android 플랫폼 버전에서 제공하는 프레임워크 API 계정을 고유하게 식별하는 정수 \t- 각 플랫폼 버전은 정확히 하나의 api를 지원하지만, 모든 이전 API 레벨(API 레벨 1까지)에 대한 지원이 암시적으로 지원된다.targetSdk를 올릴 때에는 언제인가?  Android 버전이 높은 기기에서 최소 targetSdk가 있을 때          예를 들면 Android 15에서는 targetSdk        Google Play 요구사항          targetSdk34 때는 타겟팅이 되어야 신규 앱 등록 or 앱 업데이트가 가능했었다. (링크)        왜 올려야 할까?          새로운 버전의 Sdk가 나오면, 보안과 성능이 개선된다.      일부는 이런 지원을 명시적으로 선언한 앱에서만 적용된다.      버전 대응의 의미  Android 버전에 대응하겠다라는 것은          다양한 Android 버전에서 작동하도록 하는 것.      오래된 기기에서도 앱을 사용할 수 있도록 하는 것        targetSdk 버전에 대응하겠다는 것은          특정 Android 버전을 목표로 개발하여 최적화 하겠다.      새로운 Android 기능 및 최적화를 활용해 최신 버전의 Android에서 정상적으로 작동하도록 하는 것.      "
  }
  
]

